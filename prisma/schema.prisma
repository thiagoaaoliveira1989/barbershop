generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String?
  updatedAt        DateTime           @updatedAt
  createdAt        DateTime           @default(now())
  emailVerified    DateTime?
  role             UserRole           @default(USER)
  image            String?
  accounts         Account[]
  BarbershopRating BarbershopRating[]
  bookings         Booking[]
  sessions         Session[]
}

enum UserRole {
  USER // USUARIO COMUM
  BARBER // BARBEIRO
  MASTER // DONO BARBERARIA
  ADMIN // ADMIN DO SISTEMA
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id           String              @id @default(uuid())
  name         String
  address      String
  phones       String[]
  description  String
  imageUrl     String
  updatedAt    DateTime            @updatedAt
  createdAt    DateTime            @default(now())
  avaliation   Float               @default(0)
  totalRatings Int                 @default(0)
  ratings      BarbershopRating[]
  services     BarbershopService[]
}

model BarbershopRating {
  id           String     @id @default(uuid())
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, barbershopId])
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String            @id @default(uuid())
  userId    String
  updatedAt DateTime          @updatedAt
  createdAt DateTime          @default(now())
  date      DateTime
  serviceId String
  confirmed BookingStatus     @default(PENDING)
  service   BarbershopService @relation(fields: [serviceId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
}
